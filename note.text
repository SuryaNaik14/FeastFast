props:- when we have to dynamically pass data to component we pass  it as a props.

    <ResCards name="food cart" items="Masale Dose,Benne Dose,Neer Dose"/>
              -----            -------
    const ResCards=(props)=>{
    console.log(props)
    return(
        <div  className="res-Card">
            <img src='' alt='' className='card-img' />
            <h3>{props.name}</h3>
                -------------
            <h4>{props.items}</h4>
                -------------
    )
    }
................................
config driven UI

-------------------------------------------tutorial 5 -------------------------
exports 2 types 
    1.named exports;
    1.default export

-------------------------------------------react hooks 5 ---
#react hooks
they r normal js utility fun's
1.useStare  : when state variabel upadtes react reRender the components
............
1.useEffects : when body component is render useEffects is called
               * is called every render of the component
               *if no dependency array is called on every render
               *if dependency array[] is empty is called only initial render or only once
               * if dependency array[] have value, it will called every time when value will change
............

Virtuale DOM: is a representation of acutal DOM
-------------


-------------------------------------------tutorial 7 -------------------------

npm i react-router-dom
we import : createBrowserRouter, RouterProvider from react-router-dom

rafce: shortcut for creating components inside code
Outlet : import Outlet and we fix the header on every page
Link: routing pages

# 2 types od routing
1.server side routing
2.clint side routing : components are interchange 

-------------------------------------------tutorial 8 -------------------------

                                        class based components 
                                        ----------------------
we use constructer inside super() method: because child class are override the parent class. using super() method
 parent class before child class called. *parent call first for meantine its behavior*.

    Life cycle of Class component
    -----------------------------
    1.constructer()
    2.render()
    3.componentDidMount()

-------------------------------------------tutorial 09 ------------------------------
                                Custom hooks
                             ------------------
Single Responsability Principle: each component have single Responsability

#code Splitting
#Dynamic bundling
#Chunking


-------------------------------------------tutorial 12 ------------------------------
                                    Redux
                             ------------------
Redux ToolKit
-install @reduxjs/toolkit and react-redux

-Build our store
-connect our store to our app
-Slice(cartSlice)
-dispature(Action)
-selector
-------------------------------------------tutorial 12 ------------------------------
                                    Testing
                             ------------------
-Unit Testing
-Integration Testing
-End-To-End Testing

-library's # setting up Testing
---------
npm i -D @testing-library/react
npm i jest
npm install --save-dev babel-jest @babel/core @babel/preset-env
install babel dependencies
config babel(babel.config.js)
config parcel config file to disable default babel transpilation
jest config (npx jest --init) -
                            -jsDom :- envirnoment to run test Cases
                            --------
Install JsDom library
install @babel/preset-react (npm i -D @babel/preset-react) :- to work jsx in test cases
include @babel/preset-react inside my babel config
install @testing-library/jest-dom(npm i -D @testing-library/jest-dom)
ex: 
    test('should load button in contact component', () => { 
        render(<Contact/>);
        const heading=screen.getByPlaceholderText('name')

        expect(heading).toBeInTheDocument();
    })


Link : wrap inside the <BrowserRouter></BrowserRouter>






